#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -f "$HOME/.config/fish/config.fish" ]; then
  touch "$HOME/.config/fish/config.fish"
fi

# if [ ! -d "$HOME/.bin/" ]; then
#   mkdir "$HOME/.bin"
# fi
#
# if [ ! -f "$HOME/.zshrc" ]; then
#   touch "$HOME/.zshrc"
# fi
#
# # shellcheck disable=SC2016
# append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'
#
# HOMEBREW_PREFIX="/usr/local"
#
# if [ -d "$HOMEBREW_PREFIX" ]; then
#   if ! [ -r "$HOMEBREW_PREFIX" ]; then
#     sudo chown -R "$LOGNAME:admin" /usr/local
#   fi
# else
#   sudo mkdir "$HOMEBREW_PREFIX"
#   sudo chflags norestricted "$HOMEBREW_PREFIX"
#   sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
# fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

update_fish_shell() {
  local shell_path;
  shell_path="$(command -v fish)"

  fancy_echo "Changing your shell to fish ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '${shell_path}' to /etc/shells"
    echo "$shell_path" | sudo tee -a /etc/shells
  fi
  sudo chsh -s "$shell_path" "$USER"
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    # Apple Silicon
    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $HOME/.zprofile
    eval "$(/opt/homebrew/bin/brew shellenv)"

    # Intel
    # append_to_zshrc '# recommended by brew doctor'
    #
    # # shellcheck disable=SC2016
    # append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
    #
    # export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
# tap "thoughtbot/formulae"
tap "homebrew/services"
tap "universal-ctags/universal-ctags"
# tap "heroku/brew"
# Unix
brew "universal-ctags", args: ["HEAD"]
brew "git"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "vim"
brew "watchman"
# brew "zsh"
brew "fish"
# Heroku (don't need)
# brew "heroku/brew/heroku"
# brew "parity"
# GitHub
brew "gh"
# Image manipulation (dont' need)
# brew "imagemagick"
# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
# brew "yarn"  (should be installed with nodejs)
cask "gpg-suite"
# Databases
# brew "postgres", restart_service: :changed
# brew "redis", restart_service: :changed
# Extras
brew "awscli"
brew "fzf"
brew "gnupg" # asdf-nodejs dependency
brew "jq"
brew "neovim"
brew "tmux"
brew "wget"
brew "starship"
brew "bat"
brew "exa"
brew "tmuxinator"
brew "diff-so-fancy"
EOF

update_fish_shell

# fzf key bindings
$(brew --prefix)/opt/fzf/install --all

# fancy_echo "Update heroku binary ..."
# brew unlink heroku
# brew link --force heroku


fancy_echo "Configuring asdf version manager ..."
# if [ ! -d "$HOME/.asdf" ]; then
if ! command -v asdf >/dev/null; then
  brew install asdf
  echo "\n. $(brew --prefix asdf)/asdf.fish" >> ~/.config/fish/config.fish
  # git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.5.0
  # append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
fi

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

# shellcheck disable=SC1090
source "$(brew --prefix asdf)/asdf.sh"
add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
add_or_update_asdf_plugin "python"

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"
  fancy_echo "Found latest version for language: $language, version: $version"

  if ! asdf list "$language" | grep -Fq "$version"; then
    fancy_echo "Installing language: $language, version: $version"
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

fancy_echo "Installing latest Ruby ..."
install_asdf_language "ruby"
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node ..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

fancy_echo "Install YARN to support neovim"
npm install -g yarn

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi

fancy_echo "Neovim dependency"
npm install -g neovim
gem install neovim
